type GroupCount {
    group: String
    subjects: Int
}

type FileUUID {
    file_id: String
}

type SubjectOverview {
    subject_id: String
    race: String
    disease_term: String
    registering_institution: String
    patient_subgroup: String
    stage_at_entry: String
    cause_of_death: String
    sites_of_disease_at_autopsy: String
    source_of_the_lab_data: String
    lab_test: String
    system_organ_class: String
    serious: String
    outcome: String
    pathogenicity: String
    germline_pathogenicity: String
    files: [FileUUID]
}

type FileOverview {
    file_id: String
    file_name: String
    file_description: String
    file_format: String
    file_size: Int
    trial_id: String
    trial_short_name: String
    arm: String
    subject_id: String
    file_type: String
    md5sum: String
}

type SearchResult {
    numberOfTrials: Int
    numberOfSubjects: Int
    numberOfFiles: Int
    fileIds: [String]
    subject_ids: [String]
}

type SubjectDetail {
    subject_id: String
    gender: String
    age_at_entry: Int
    race: String
    registering_institution: String
    disease_term: String
    patient_subgroup: String
    files: [FileOverview]
    enrollments: [Enrollment]
    adverse_events: [AdverseEvent]
    somatic_variant: [SomaticVariant]
    germline_variant: [GermlineVariant]
}

type Enrollment {
    date_of_diagnosis: String
    histology: String
    eligibility: String
    gleason_score: String
    consent_signed_date: String
    consent_version_date: String
    stage_at_entry: String
    labs_inclusion_start_date: String
}

type AdverseEvent {
    course: String
    course_day: String
    onset_date: String
    resolved_date: String
    term: String
    organ_class: String
    event_description: String
    grade: String
    research_attribution: String
    disease_attribution: String
    other_attribution: String
    other_extra: String
    unexpected_adverse_events: String
    serious: String
    action: String
    therapy: String
    outcome: String
    expedited_report_to_IRB: String
    expedited_report_to_CCR: String
}

type SomaticVariant {
    gene_panel_500: String
    gene_pathogenic_variant: String
    somatic_pathogenicity: String
}

type GermlineVariant {
    panelCode: String
    gene_pathogenic_variant: String
    germline_pathogenicity: String
}

type TrialInfo {
    trial_name: String
    trial_id: String
    trial_description: String
    trial_type: String
    num_subjects: Int
}

type SiteSubjectCount{
    site_id: String
    site_name: String
    site_address: String
    site_status: String
    num_subjects: Int
}

type TrialDetail{
    trial_id: String
    trial_name: String
    trial_long_name: String
    trial_description: String
    lead_organization: String
    trial_type: String
    trial_principal_investigator: String
    num_subjects: Int,
    num_files: Int,
    sites: [SiteSubjectCount]
}

type SiteDetail{
    site_id: String
    site_name: String
    site_address: String
    site_contact: String
    site_phone: String
    site_email: String
    site_status: String
    num_subjects: Int
    num_files: Int
    subjects: [SubjectDetail]
    files: [FileOverview]
}

schema {
    query: QueryType
}

type QueryType {
    schemaVersion: String @cypher(statement: "RETURN '0.8.0'")

    subjectDetail(subject_id: String): SubjectDetail @cypher(statement: """
        MATCH (s:SUBJECT {PT_ID: $subject_id})
        OPTIONAL MATCH (s)<--(f:FILE)
        OPTIONAL MATCH (s)<--(e:ENROLLMENT)
        OPTIONAL MATCH (s)<--(ae:ADVERSE_EVENTS)
        OPTIONAL MATCH (s)<--(sv:SOMATIC_VARIANT)
        OPTIONAL MATCH (s)<--(gv:GERMLINE_VARIANT)
        WITH s,
            COLLECT(DISTINCT f {
                subject_id: s.PT_ID,
                file_name: f.FILE_NAME,
                file_type: f.FILE_TYPE,
                file_description: f.FILE_DESCRIPTION,
                file_format: f.FILE_FORMAT,
                file_size: f.FILE_SIZE,
                file_id: f.UUID,
                md5sum: f.MD5SUM
            }) AS files,
            COLLECT(DISTINCT e {
                date_of_diagnosis: e.DX_DT,
                histology: e.HIST_CYTPATH_DESC,
                eligibility: e.PT_ELIG_IND,
                gleason_score: e.GLESNSC_GD_PRSCA_VAL,
                consent_signed_date: e.ICF_SIG_DT,
                consent_version_date: e.PROT_AMDT_DT,
                stage_at_entry: e.DISEAS_STG,
                labs_inclusion_start_date: e.PRESTUDY_LAB_DT
            }) AS enrollments,
            COLLECT(DISTINCT ae {
                course: ae.CRSE_NUM,
                course_day: ae.CRSE_DAY_NUM,
                onset_date: ae.AE_ONSET_DT,
                resolved_date: ae.RESOLV_DT,
                term: ae.CTCAE5_LLT_NM,
                organ_class: ae.MEDDRA_SOC_TRM_NM,
                event_description: ae.AE_DESC_TXT,
                grade: ae.AE_SEV_GD,
                research_attribution: ae.AE_RESRCH_ATRB_CAT,
                disease_attriibution: ae.AE_DZ_ATRB_CAT,
                other_attribution: ae.AE_OTH_COND_ATRB_CAT,
                other_extra: ae.OTX_AE_SHORT_TXT,
                unexpected_adverse_events: ae.UNEXP_AE_OCC_CD_IND,
                serious: ae.SAE_RSN,
                action: ae.AE_ACTION,
                therapy: ae.AE_THERAPY,
                outcome: ae.AE_OUTCOME,
                expedited_report_to_IRB: ae.AER_IND,
                expedited_report_to_CCR: ae.CCR_EP_AE_SUBM_IND
            }) AS adverse_events,
            COLLECT(DISTINCT sv {
                gene_panel_500: sv.TUMR_GENE_SEQ_TSO_CD,
                gene_pathogenic_variant: sv.GENE_PATH_VAR_NM,
                somatic_pathogenicity: sv.SOMATIC_VAR_PTHGNC_CAT
            }) AS somatic_variant,
            COLLECT(DISTINCT gv {
                panelCode: gv.HERED_GENE_PANL_CD,
                gene_pathogenic_variant: gv.GENE_PATH_VAR_NM,
                germline_pathogenicity: gv.GRMLN_VAR_PTHGNC_CAT
            }) AS germline_variant
        RETURN {
            subject_id: s.PT_ID,
            gender: s.PRSN_GENDER_TXT_TP,
            age_at_entry: s.PT_AGE_VAL,
            race: s.PT_RACE_CD_1,
            registering_institution: s.REG_INST_ID_CD,
            disease_term: s.DZ_DX_NM,
            patient_subgroup: s.PT_SUBGRP_ASSIGN_TP,
            files: files,
            enrollments: enrollments,
            adverse_events: adverse_events,
            somatic_variant: somatic_variant,
            germline_variant: germline_variant
        }
    """, passThrough: true)

    trialsInfo: [TrialInfo] @cypher(statement: """
        MATCH (ct:CLINICALTRIAL)
        OPTIONAL MATCH (ct)<--(s:SUBJECT)
        RETURN {
            trial_name: ct.CLINICAL_TRIAL_SHORT_NAME,
            trial_id: ct.CLINICAL_TRIAL_ID,
            trial_description: ct.CLINICAL_TRIAL_DESCRIPTION,
            trial_type: ct.CLINICAL_TRIAL_TYPE,
            num_subjects: COUNT(s.PT_ID)
        }
    """, passThrough: true)

    trialDetail(trial_id: String): TrialDetail @cypher(statement: """
        MATCH (ct:CLINICALTRIAL {CLINICAL_TRIAL_ID: $trial_id}) 
        OPTIONAL MATCH (ct)<--(site:SITE)
        OPTIONAL MATCH (site)<--(s:SUBJECT)
        OPTIONAL MATCH (s)<--(f:FILE)
        WITH 
            COUNT(DISTINCT s) AS num_subjects, 
            COUNT(DISTINCT f) as num_files
        MATCH (ct:CLINICALTRIAL {CLINICAL_TRIAL_ID: $trial_id}) 
        OPTIONAL MATCH (ct)<--(site:SITE)
        OPTIONAL MATCH (site)<--(s:SUBJECT)
        WITH num_subjects, num_files, ct, site, 
            COUNT(DISTINCT s) AS num_site_subjects
        WITH num_subjects, num_files, ct,
            COLLECT(DISTINCT site {
                site_id: site.REG_INST_ID,
                site_name: site.REG_INST_ID_CD,
                site_address: site.LOCATION,
                site_status: site.STATUS,
                num_subjects: num_site_subjects
            }) AS sites
        RETURN {
            trial_id: ct.CLINICAL_TRIAL_ID,
            trial_name: ct.CLINICAL_TRIAL_SHORT_NAME,
            trial_long_name: ct.CLINICAL_TRIAL_LONG_NAME,
            trial_description: ct.CLINICAL_TRIAL_DESCRIPTION,
            lead_organization: ct.LEAD_ORGANIZATION,
            trial_type: ct.CLINICAL_TRIAL_TYPE,
            trial_principal_investigator: ct.PRINCIPAL_INVESTIGATOR,
            num_subjects: num_subjects,
            num_files: num_files,
            sites: sites
        }
    """, passThrough: true)

    trialSubjectCountByStageAtEntry(trial_id: String): [GroupCount] @cypher(statement: """
        MATCH (ct:CLINICALTRIAL {CLINICAL_TRIAL_ID: $trial_id})<--(s:SUBJECT)<--(e:ENROLLMENT)
        RETURN{
            group: e.DISEAS_STG,
            subjects: COUNT(*)
        } 
    """, passThrough: true)

    siteSubjectCountByStageAtEntry(site_id: String): [GroupCount] @cypher(statement: """
        MATCH (st:SITE {REG_INST_ID: $site_id})<--(s:SUBJECT)<--(e:ENROLLMENT)
        RETURN{
            group: e.DISEAS_STG,
            subjects: COUNT(*)
        }
    """, passThrough: true)

    siteDetail(site_id: String): SiteDetail @cypher(statement: """
        MATCH (site:SITE {REG_INST_ID: $site_id})
        OPTIONAL MATCH (site)<--(s:SUBJECT)
        OPTIONAL MATCH (s)<--(f:FILE)
        WITH 
            COUNT(DISTINCT s) AS num_subjects, 
            COUNT(DISTINCT f) AS num_files
        MATCH (site:SITE {REG_INST_ID: $site_id})
        OPTIONAL MATCH (site)<--(s:SUBJECT)
        OPTIONAL MATCH (s)<--(f:FILE)
        WITH site, num_subjects, num_files,
            COLLECT(DISTINCT s{
                    subject_id: s.PT_ID,
                    race: s.PT_RACE_CD_1,
                    disease_term: s.DZ_DX_NM
            }) AS subjects,
            COLLECT(DISTINCT f{
                subject_id: s.PT_ID,
                file_name: f.FILE_NAME,
                file_type: f.FILE_TYPE,
                file_description: f.FILE_DESCRIPTION,
                file_format: f.FILE_FORMAT,
                file_size: f.FILE_SIZE,
                file_id: f.UUID,
                file_md5sum: f.MD5SUM
            }) AS files
        RETURN{
            site_id: site.REG_INST_ID,
            site_name: site.REG_INST_ID_CD,
            site_address: site.LOCATION,
            site_contact: site.CONTACT,
            site_phone: site.PHONE,
            site_email: site.EMAIL,
            site_status: site.STATUS,
            subjects: subjects,
            num_subjects: num_subjects,
            num_files: num_files,
            files: files
        }
    """, passThrough: true)

    sitesInfo: [SiteDetail] @cypher(statement: """
        MATCH (site:SITE)
        OPTIONAL MATCH (site)<--(s:SUBJECT)
        RETURN {
            site_id: site.REG_INST_ID,
            site_name: site.REG_INST_ID_CD,
            site_address: site.LOCATION,
            site_status: site.STATUS,
            num_subjects: COUNT(DISTINCT s)
        }
    """, passThrough: true)
}